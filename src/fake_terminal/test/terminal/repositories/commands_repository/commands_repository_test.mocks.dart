// Mocks generated by Mockito 5.3.2 from annotations
// in fake_terminal/test/terminal/repositories/commands_repository/commands_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fake_terminal/terminal/models/fake_data.dart' as _i2;
import 'package:fake_terminal/terminal/models/terminal_command.dart' as _i7;
import 'package:fake_terminal/terminal/repositories/commands_repository/code_repository_executor.dart' as _i9;
import 'package:fake_terminal/terminal/repositories/commands_repository/commands_loader.dart' as _i6;
import 'package:fake_terminal/terminal/repositories/commands_repository/exit_executor.dart' as _i8;
import 'package:fake_terminal/terminal/repositories/content_repository/content_repository.dart' as _i5;
import 'package:fake_terminal/terminal/repositories/fake_data_repository/fake_data_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFakeData_0 extends _i1.SmartFake implements _i2.FakeData {
  _FakeFakeData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FakeDataRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFakeDataRepository extends _i1.Mock implements _i3.FakeDataRepository {
  MockFakeDataRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.FakeData> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i4.Future<_i2.FakeData>.value(_FakeFakeData_0(
          this,
          Invocation.method(
            #load,
            [],
          ),
        )),
      ) as _i4.Future<_i2.FakeData>);
}

/// A class which mocks [ContentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockContentRepository extends _i1.Mock implements _i5.ContentRepository {
  MockContentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> load(String? url) => (super.noSuchMethod(
        Invocation.method(
          #load,
          [url],
        ),
        returnValue: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
}

/// A class which mocks [CommandsLoader].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommandsLoader extends _i1.Mock implements _i6.CommandsLoader {
  MockCommandsLoader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.TerminalCommand>> loadCommands() => (super.noSuchMethod(
        Invocation.method(
          #loadCommands,
          [],
        ),
        returnValue: _i4.Future<List<_i7.TerminalCommand>>.value(<_i7.TerminalCommand>[]),
      ) as _i4.Future<List<_i7.TerminalCommand>>);
}

/// A class which mocks [TerminalCommand].
///
/// See the documentation for Mockito's code generation for more information.
class MockTerminalCommand extends _i1.Mock implements _i7.TerminalCommand {
  MockTerminalCommand() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
      ) as String);
  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: '',
      ) as String);
  @override
  String get manual => (super.noSuchMethod(
        Invocation.getter(#manual),
        returnValue: '',
      ) as String);
  @override
  _i4.Future<List<String>> execute({
    required List<String>? arguments,
    required List<String>? history,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #arguments: arguments,
            #history: history,
          },
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);
  @override
  String? autocomplete(String? argument) => (super.noSuchMethod(Invocation.method(
        #autocomplete,
        [argument],
      )) as String?);
}

/// A class which mocks [ExitExecutor].
///
/// See the documentation for Mockito's code generation for more information.
class MockExitExecutor extends _i1.Mock implements _i8.ExitExecutor {
  MockExitExecutor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool hasExitCommand() => (super.noSuchMethod(
        Invocation.method(
          #hasExitCommand,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void executeExitCommand() => super.noSuchMethod(
        Invocation.method(
          #executeExitCommand,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CodeRepositoryExecutor].
///
/// See the documentation for Mockito's code generation for more information.
class MockCodeRepositoryExecutor extends _i1.Mock implements _i9.CodeRepositoryExecutor {
  MockCodeRepositoryExecutor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void executeOpenTerminalRepositoryCommand() => super.noSuchMethod(
        Invocation.method(
          #executeOpenTerminalRepositoryCommand,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void executeOpenPersonalRepositoryCommand() => super.noSuchMethod(
        Invocation.method(
          #executeOpenPersonalRepositoryCommand,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
