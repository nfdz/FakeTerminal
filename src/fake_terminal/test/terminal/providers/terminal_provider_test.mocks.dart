// Mocks generated by Mockito 5.3.2 from annotations
// in fake_terminal/test/terminal/providers/terminal_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fake_terminal/terminal/models/terminal_history.dart' as _i5;
import 'package:fake_terminal/terminal/models/terminal_line.dart' as _i6;
import 'package:fake_terminal/terminal/repositories/commands_repository/commands_repository.dart' as _i2;
import 'package:fake_terminal/terminal/repositories/history_repository/history_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExecuteCommandResult_0 extends _i1.SmartFake implements _i2.ExecuteCommandResult {
  _FakeExecuteCommandResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HistoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHistoryRepository extends _i1.Mock implements _i3.HistoryRepository {
  MockHistoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.TerminalHistory?> fetchTerminalHistory() => (super.noSuchMethod(
        Invocation.method(
          #fetchTerminalHistory,
          [],
        ),
        returnValue: _i4.Future<_i5.TerminalHistory?>.value(),
      ) as _i4.Future<_i5.TerminalHistory?>);
  @override
  _i4.Future<void> saveTerminalHistory(_i5.TerminalHistory? history) => (super.noSuchMethod(
        Invocation.method(
          #saveTerminalHistory,
          [history],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [CommandsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommandsRepository extends _i1.Mock implements _i2.CommandsRepository {
  MockCommandsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool hasExitCommand() => (super.noSuchMethod(
        Invocation.method(
          #hasExitCommand,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void executeExitCommand() => super.noSuchMethod(
        Invocation.method(
          #executeExitCommand,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void executeOpenTerminalRepositoryCommand() => super.noSuchMethod(
        Invocation.method(
          #executeOpenTerminalRepositoryCommand,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String? autocomplete(String? commandLine) => (super.noSuchMethod(Invocation.method(
        #autocomplete,
        [commandLine],
      )) as String?);
  @override
  _i4.Future<_i2.ExecuteCommandResult> executeCommandLine(
    String? commandLine,
    List<_i6.TerminalLine>? output,
    List<String>? history,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeCommandLine,
          [
            commandLine,
            output,
            history,
          ],
        ),
        returnValue: _i4.Future<_i2.ExecuteCommandResult>.value(_FakeExecuteCommandResult_0(
          this,
          Invocation.method(
            #executeCommandLine,
            [
              commandLine,
              output,
              history,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ExecuteCommandResult>);
}
