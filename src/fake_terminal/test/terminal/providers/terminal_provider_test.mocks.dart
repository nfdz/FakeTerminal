// Mocks generated by Mockito 5.0.7 from annotations
// in fake_terminal/test/terminal/providers/terminal_provider_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:fake_terminal/terminal/models/terminal_history.dart' as _i2;
import 'package:fake_terminal/terminal/models/terminal_line.dart' as _i6;
import 'package:fake_terminal/terminal/repositories/commands_repository/commands_repository.dart'
    as _i5;
import 'package:fake_terminal/terminal/repositories/history_repository/history_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeTerminalHistory extends _i1.Fake implements _i2.TerminalHistory {}

/// A class which mocks [HistoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHistoryRepository extends _i1.Mock implements _i3.HistoryRepository {
  MockHistoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.TerminalHistory?> fetchTerminalHistory() =>
      (super.noSuchMethod(Invocation.method(#fetchTerminalHistory, []),
              returnValue:
                  Future<_i2.TerminalHistory?>.value(_FakeTerminalHistory()))
          as _i4.Future<_i2.TerminalHistory?>);
  @override
  _i4.Future<void> saveTerminalHistory(_i2.TerminalHistory? history) =>
      (super.noSuchMethod(Invocation.method(#saveTerminalHistory, [history]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}

/// A class which mocks [CommandsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommandsRepository extends _i1.Mock
    implements _i5.CommandsRepository {
  MockCommandsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool hasExitCommand() =>
      (super.noSuchMethod(Invocation.method(#hasExitCommand, []),
          returnValue: false) as bool);
  @override
  void executeExitCommand() =>
      super.noSuchMethod(Invocation.method(#executeExitCommand, []),
          returnValueForMissingStub: null);
  @override
  String? autocomplete(String? commandLine) =>
      (super.noSuchMethod(Invocation.method(#autocomplete, [commandLine]))
          as String?);
  @override
  _i4.Future<void> executeCommandLine(String? commandLine,
          List<_i6.TerminalLine>? output, List<String>? history) =>
      (super.noSuchMethod(
          Invocation.method(
              #executeCommandLine, [commandLine, output, history]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}
