// Mocks generated by Mockito 5.3.2 from annotations
// in fake_terminal/test/terminal/widgets/internal/top_menu_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:fake_terminal/theme/models/theme_settings.dart' as _i5;
import 'package:fake_terminal/theme/providers/theme_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod/riverpod.dart' as _i4;
import 'package:state_notifier/state_notifier.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ThemeNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeNotifier extends _i1.Mock implements _i2.ThemeNotifier {
  MockThemeNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> get initializationComplete => (super.noSuchMethod(
        Invocation.getter(#initializationComplete),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
  @override
  set onError(_i4.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);
  @override
  _i3.Stream<_i5.ThemeSettings> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i5.ThemeSettings>.empty(),
      ) as _i3.Stream<_i5.ThemeSettings>);
  @override
  _i5.ThemeSettings get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i5.ThemeSettings.dark,
      ) as _i5.ThemeSettings);
  @override
  set state(_i5.ThemeSettings? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.ThemeSettings get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _i5.ThemeSettings.dark,
      ) as _i5.ThemeSettings);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void toggleTheme() => super.noSuchMethod(
        Invocation.method(
          #toggleTheme,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool updateShouldNotify(
    _i5.ThemeSettings? old,
    _i5.ThemeSettings? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i4.RemoveListener addListener(
    _i6.Listener<_i5.ThemeSettings>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i4.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
